#! /bin/sh

# Author:
#
#     Alberto Bursi <starshipeleven@hotmail.it>
#
# Copyright:
#
#     Alberto Bursi 2015
#
# License:
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This package is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# On Debian systems, the complete text of the GNU General
# Public License version 3 can be found in `/usr/share/common-licenses/GPL-3'.

###############FUNCTIONS#######################

print_usage() {
	echo "folder2ram is a script-based utility that relocates the contents of a folder to RAM"
	echo "and on shutdown unmounts it safely synching the data back to the permanent storage."
	echo ""
	echo "There are five main components of folder2ram system:"
	echo "--the init scripts that do the mounting and unmounting automatically in /etc/init.d"
	echo "--the configuration and management tool in /etc/sbin/folder2ram"
	echo "--the configuration file in /etc/folder2ram.conf"
	echo "--the template files in /doc/templates"
	echo "--the folders in /var/folder2ram, the bind-mounted folders"
	echo "  they allow easy access to the original folder in permanent storage"
	echo "  since if you mount folder A on folder B you lose access to folder B"
	echo "  this trick allows access to B, allowing synching with the tmpfs at will"
	echo ""
	echo ""
	echo "list of options and actions:"
	echo ""
	echo "-generate"
	echo "::::::::::folder2ram will read the configuration file at /etc/folder2ram.etc"
	echo "::::::::::and generate the init scripts that are missing"
	echo ""
	echo "-clean"
	echo "::::::::::stop folder2ram and remove all folder2ram init scripts"
	echo ""
	echo "-refresh"
	echo "::::::::::execute a -clean followed by a -generate"
	echo ""
	echo "-status"
	echo "::::::::::print all mountpoints and their status (mounted or unmounted)"
	echo ""
	echo "-mountall"
	echo "::::::::::folder2ram will start all initscripts of all folders in the config file"
	echo ""
	echo "-mount /folder/path"
	echo "::::::::::folder2ram will start the init script for that particular folder,"
	echo "::::::::::if it is in the configuration file."
	echo ""
	echo "-mountall"
	echo "::::::::::folder2ram will start all initscripts of all folders in the config file"
	echo ""
	echo "-umount /folder/path"
	echo "::::::::::folder2ram will stop the init script for that particular folder,"
	echo "::::::::::if it is in the configuration file."
	echo ""
	echo "-umountall"
	echo "::::::::::folder2ram will stop all initscripts of all folders in the config file"
	echo ""
	echo "-configure"
	echo "::::::::::folder2ram will open the configuration file in a graphical text editor"
	echo ""
	echo "-reset"
	echo "::::::::::delete all folder2ram init scripts and restore default config file"
	echo ""
}

print_usage_exit() {
    print_usage
    exit
}

read_config_file() {
#this reads config file at a predetemined line and extracts mount point and (in the future) additional options
#line_number must come from outside

line_number="4"
# get variable form outside, remove blank and commented lines, and print line at $line_number
mount_point=`awk -v line=$line_number '!/^ *#/ && NF && FNR == line {print $2}' /home/alby/testfstab ` 

echo $mount_point
echo 

}

generate_initscripts() {
    







    exit
}



##################END FUNCTIONS ###########################

#force='false'
#quiet='false'
mountpoint='%%none%%'
all_mountpoints='false'

action="$1"
[ -z "$action" ] && print_usage_exit;

shift

while [ $# -gt 0 ]; do
    case "$1" in
        -a)
            [ "$mountpoint" != "%%none%%" ] && print_usage_exit
            mountpoint=""
            ;;

#        -f)
#            force='true'
#            ;;

#        -q)
#            quiet='true'
#            ;;

        *)
            [ -z "$mountpoint" ] || [ "$mountpoint" != '%%none%%' ] && print_usage_exit
            mountpoint="$1"
            ;;
    esac
    shift
done

[ "$mountpoint" = "%%none%%" ] && print_usage_exit

case "$action" in
-generate)
        generate_initscripts
        ;;
-clean)
        clean_initscripts
        ;;
-refresh)
        refresh_initscripts
        ;;
-status)
        print_status
        ;;
-mount)
        mount_mountpoint $mountpoint
        ;;
-mountall)
	mount_all
        ;;
-umount)
        umount_mountpoint $mountpoint
        ;;
-umountall)
        umount_all
        ;;
-configure)
        configure
        ;;
-reset)
        reset
        ;;
*)
        print_usage
        ;;
esac

